"use strict";

/**
 * Main script of the 'pre-host preparation' stage.
 *
 * @param {String} process.env[config.varInstanceUuid()] - The instance definition UUID.
 * @param {Boolean/String} process.env[config.varArtifactsChanges()] - 'true' if the artifacts section should be processed, 'false' otherwise
 * @param {Boolean/String} process.env[config.varDataChanges()] - 'true' if the data section should be processed, 'false' otherwise
 */

const fs = require("fs");
const path = require("path");
const _ = require("lodash");

const utils = require("../utils/utils");
const model = require("../utils/model");
const cst = require("../const");
const config = require(cst.CONFIGPATH);
const db = require(cst.DBPATH);

const scripts = require("./scripts");

const currentStage = config.getPrehostPrepareStatusCode();

//
//  Fetching the instance definition based on the provided UUID
//
var instanceDef = db.getInstanceDefinition(
  process.env[config.varInstanceUuid()]
);
if (_.isEmpty(instanceDef)) {
  throw new Error("Illegal argument: empty or unexisting instance definition.");
}

//
//  Building the script
//
var script = new model.Script();
script.type = "#!/bin/bash";
script.headComment =
  "# Autogenerated script for the CD instance preparation prior to connecting to the host...";
script.body = "set -xe\n";

// 'artifacts'

if (process.env[config.varArtifactsChanges()] === "true") {
  var artifactsDirPath = config.getCDArtifactsDirPath(instanceDef.uuid);
  script.body += scripts.initFolder(artifactsDirPath, "jenkins", true);

  instanceDef.artifacts.forEach(function(artifact) {
    script.body += scripts.fetchArtifact(artifact, artifactsDirPath);
  });
}

// 'data'

if (process.env[config.varDataChanges()] === "true") {
  // TODO
}

//
//  Saving the script in the current build dir.
//
fs.writeFileSync(
  path.resolve(config.getBuildDirPath(), config.getPrehostPrepareScriptName()),
  utils.getScriptAsString(script)
);
fs.chmodSync(
  path.resolve(config.getBuildDirPath(), config.getPrehostPrepareScriptName()),
  "0755"
);

// Saving the status
fs.writeFileSync(
  path.resolve(config.getBuildDirPath(), config.getStatusFileName()),
  JSON.stringify({ status: currentStage })
);
