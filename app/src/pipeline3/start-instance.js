"use strict";

/**
 * Main script of the 'start instance' stage.
 *
 */

const fs = require("fs");
const path = require("path");
const _ = require("lodash");

const utils = require("../utils/utils");
const model = require("../utils/model");
const cst = require("../const");
const config = require(cst.CONFIGPATH);
const db = require(cst.DBPATH);

const scripts = require("./scripts");

//
//  Fetching the instance definition based on the provided UUID
//
var instanceDef = db.getInstanceDefinition(
  process.env[config.varInstanceUuid()]
);
if (_.isEmpty(instanceDef)) {
  throw new Error("Illegal argument: empty or unexisting instance definition.");
}

//
//  Host metadata
//
var ssh = instanceDef.deployment.host.value; // TODO this should be extracted based on the host type
var hostDir = instanceDef.deployment.hostDir;

//
//  Building the script
//
var script = new model.Script();
script.type = "#!/bin/bash";
script.headComment = "# Autogenerated script for the CD instance start...";
script.body = "set -e\n";

if (instanceDef.deployment.type === "docker") {
  var docker = instanceDef.deployment.value;
  var dockerCommand = "";
  var dockerCommandArgs = [];
  dockerCommandArgs.push("docker run -dit");
  dockerCommandArgs.push("--restart unless-stopped");

  Object.keys(docker.ports).forEach(function(key) {
    dockerCommandArgs.push("--publish " + docker.ports[key] + ":" + key);
  });

  var labels = {
    type: instanceDef.type,
    group: instanceDef.group
  };
  Object.keys(labels).forEach(function(key) {
    dockerCommandArgs.push("--label " + key + "=" + labels[key]);
  });

  dockerCommandArgs.push("--name " + instanceDef.uuid);
  dockerCommandArgs.push("--hostname bahmni");

  var mounts = {
    "/mnt": hostDir
  };
  Object.keys(mounts).forEach(function(key) {
    dockerCommandArgs.push(
      "--mount type=bind,source=" + mounts[key] + ",target=" + key
    );
  });

  dockerCommandArgs.push(docker.image + ":" + docker.tag);

  dockerCommandArgs.forEach(function(arg, index) {
    dockerCommand += arg;
    dockerCommand += !dockerCommandArgs[index + 1] ? "" : " ";
  });

  script.body += scripts.remote(ssh, dockerCommand);
}
//
//  Saving the script in the current build dir.
//
fs.writeFileSync(
  path.resolve(config.getBuildDirPath(), config.getStartInstanceScriptName()),
  utils.getScriptAsString(script)
);
fs.chmodSync(
  path.resolve(config.getBuildDirPath(), config.getStartInstanceScriptName()),
  "0755"
);
