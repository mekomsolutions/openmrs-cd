"use strict";

const fs = require("fs");
const path = require("path");
const _ = require("lodash");
const log = require("npmlog");

const model = require("../../utils/model");
const utils = require("../../utils/utils");

const cmns = require("../commons");
const config = require("../../utils/config");

const thisType = "default";
module.exports = {
  getInstance: function() {
    var projectBuild = new model.ProjectBuild();

    projectBuild.projectConfigFile = utils.getProjectConfig(
      config.getConfigBuildPath()
    );

    projectBuild.getBuildScript = function() {
      return getBuildScript(projectBuild.projectConfigFile);
    };

    projectBuild.getDeployScript = function(artifact) {
      return getDeployScript(artifact, projectBuild.projectConfigFile);
    };

    projectBuild.getArtifact = function(args) {
      return cmns.getMavenProjectArtifact(
        args.pom,
        utils.getProjectConfigArtifactPath(projectBuild.projectConfigFile),
        "zip"
      );
    };

    projectBuild.postBuildActions = function(args) {
      cmns.mavenPostBuildActions(
        args.pseudoPom.groupId,
        [args.pseudoPom.artifactId],
        args.pseudoPom.version
      );
    };

    return projectBuild;
  }
};

var getBuildScript = function(configFile) {
  var script = new model.Script();
  let _script = utils.getProjectConfigBuildScript(configFile);
  script.type = "#!/bin/bash";
  script.body = _script;
  script.headComment =
    "# Autogenerated script to build projects of type '" + thisType + "'...";
  return script;
};

var getDeployScript = function(artifact, yaml) {
  if (_.isUndefined(artifact)) {
    log.error(
      "",
      "An artifact parameter must be provided to construct the '" +
        thisType +
        "' deploy script."
    );
    throw new Error();
  }

  var script = new model.Script();
  let _script = utils.getProjectConfigDeployScript(yaml);

  script.type = "#!/bin/bash";
  script.body = _script;
  script.headComment =
    "# Autogenerated script to deploy projects of type '" + thisType + "'...";
  return script;
};
