<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.33">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Job that is able to fetch and build the code of any project to then retrieve its built artifacts.&#xd;
Those built artifacts are then deployed on the configured artifact repository (typically Nexus.)&#xd;
&#xd;
It takes as an input a bunch of &apos;commit metadata&apos;, i.e. all the information about a specific code commit that is triggering the current build.</description>
  <displayName>Project Build</displayName>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>projectType</name>
          <description>The type of the code project

Supported values: &apos;openmrsmodule&apos;, &apos;bahmniapps&apos;, &apos;bahmnicore&apos;, &apos;bahmniconfig&apos;, &apos;openmrsconfig&apos;, &apos;openmrscore&apos;, &apos;distribution&apos;, &apos;initializer&apos;, &apos;maven&apos;</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>repoUrl</name>
          <description>The code project&apos;s repository URL

Eg. &quot;https://github.com/openmrs/openmrs-core&quot;</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>branchName</name>
          <description>The branch that should be built.</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>commitId</name>
          <description>The commit that should be built.

Certain projects require to pinpoint to an exact commit rather than using the tip of a branch.</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>repoName</name>
          <description>The project&apos;s repository name

Eg. &quot;openmrs-core&quot;</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>artifactsDeployment</name>
          <description>Tells whether built artifacts should be deployed to their repository.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.72">
    <script>// Name the build out of the parameters
node {
  currentBuild.displayName = &quot;${repoUrl}&quot;.substring(&quot;${repoUrl}&quot;.lastIndexOf(&quot;/&quot;) + 1) + &quot; - &quot; + &quot;${branchName}&quot;
}

pipeline {
  agent any
  options {
    ansiColor(&apos;xterm&apos;)
  }
  tools {
    maven &apos;Maven 3.5.0&apos;
    nodejs &apos;NodeJS 10.11.0&apos;
  }
  stages {
    stage (&apos;Clean the workspace&apos;) {
      steps {
        dir(&quot;$workspace&quot;){
          deleteDir()
        }
      }
    }
    stage (&apos;Checkout the code and identify all Maven artifacts&apos;) {
      steps {
        checkout scm: [$class: &apos;GitSCM&apos;, userRemoteConfigs: [[url: repoUrl]], branches: [[name: branchName]]], poll: false
        sh &apos;find . -mindepth 1 -maxdepth 2 -name pom.xml -exec xmllint --xpath &quot;//*[local-name()=\&apos;project\&apos;]/*[local-name()=\&apos;artifactId\&apos;]/text()&quot; {} \\; -exec echo \\; &gt; $BUILD_PATH/artifacts_ids.txt&apos;
      }
    }
    stage (&apos;Build the project&apos;) {
      steps {
        sh &apos;node /opt/node-scripts/src/$JOB_NAME/build.js&apos;
        sh &apos;cat $BUILD_PATH/build.sh&apos;
        sh &apos;$BUILD_PATH/build.sh&apos;
      }
    }
    stage (&apos;Deploy the built artifacts to their repository&apos;) {
      when {
        expression { return env.artifactsDeployment == &quot;true&quot; }
      }
      steps {
        sh &apos;cat $BUILD_PATH/deploy.sh&apos;
        sh &apos;$BUILD_PATH/deploy.sh $JENKINS_HOME/artifact_repository.env&apos;
      }
    }
    stage (&apos;Trigger possible downstream builds and/or save the current build parameters&apos;) {
      steps {
        sh &apos;node /opt/node-scripts/src/$JOB_NAME/downstream-builds.js&apos;
        script {
          def buildsParamsPath = &quot;${env.BUILD_PATH}/builds_params.json&quot;
          if (fileExists(buildsParamsPath)) {
            def params = readJSON file: buildsParamsPath
            for (i = 0; i &lt; params.size(); i++) {
              build job: &apos;pipeline1&apos;, wait: false, parameters: \
              [ \
                string(name: &apos;projectType&apos;, value: params[i][&apos;projectType&apos;]), \
                string(name: &apos;repoUrl&apos;, value: params[i][&apos;repoUrl&apos;]), \
                string(name: &apos;branchName&apos;, value: params[i][&apos;branchName&apos;]), \
                booleanParam(name: &apos;artifactsDeployment&apos;, value: params[i][&apos;artifactsDeployment&apos;]) \
              ]
            }
          }
        }
      }
    }
    stage (&apos;Identify impacted instances and append instances events log&apos;) {
      steps {
        sh &apos;node /opt/node-scripts/src/$JOB_NAME/identify-instances.js&apos;
      }
    }
  }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
